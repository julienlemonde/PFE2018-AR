@startuml
scale 1000*2000
title Structure SDK Interface Class diagram

package Structure {
class "STColorFrame" as CColorFrame {
    width : int
    hegiht : int
    shiftData : uint16_T
    depthInMillimeters : float
    halfResolutionDepthFrame : STDepthFrame
    timestamp : NSTimeInterval
    GLKMatrix4 : glProjectionMatrix()
    bool : applyExpensiveCorrection()
    STDepthFrame : registeredToColorFrame(colorFrame : STColorFrame)
    void : colorCameraPoseInDepthCoordinateFrame(matrix4x4: float)
}

interface STDepthFrame {

}

interface STInfraredFrame {
    data : uint16_t
    width : int
    height : int
    timestamp : NSTimeInterval
}

interface STColorFrame {
    sampleBuffer : CMSampleBufferRef
    width : int
    height : int
    timestamp : NSTimeInterval
    halfResolutionColorFrame : STColorFrame
    GLKMatrix4 : glProjectionMatrix()
}

class STSensorControllerDelegate {
    void : sensorDidConnect()
    void : sensorDidDisconnect()
    void : sensorDidStopSteaming(reason : STSensorControllerDidStopStreamingReason)
    void : sensorDidLeaveLowPowerMode()
    void : sensorBatteryNeedsCharging()
    void : sensorDidOutputDepthFrame(depthFrame : STDepthFrame)
    void : sensorDidOutputInfraredFrame(irFrame : STInfraredFrame)
    void : sensorDidOutputSynchronizedDepthFrame(depthFrame : STDepthFrame, colorFrame : STColorFrame)
    void : sensorDidOutputSynchronizedInfraredFrame(irFrame : STInfraredFrame, colorFrame : STColorFrame)
}
interface STSensorController {
    sharedController : STSensorController
    delegate : STSensorControllerDelegate
    STSensorControllerInitStatus : initializeSensorConnection()
    bool : startStreamingWithOptions(options : NSDictionary, error : NSError)
    void : stopStreaming()
    void : frameSyncNewColorBuffer(sampleBuffer : CMSampleBufferRef)
    bool : isConnected()
    bool : isLowPower()
    int : getBatteryChargePercentatge()
    string : getName()
    string : getSerialNumber()
    string : getFirmwareRevision()
    string : getHardwareRevision()
    bool : launchCalibratorAppOrGoToAppStore()
    bool : approximateCalibrationGuaranteedForDevice()
    STCalibrationType : calibrationType()
    void : setHighGainEnabled(enabled : bool)
    void : colorCameraPoseInSensorCoordinateFrame(matrix4x4 : float)
}
interface STGLTextureShaderRGBA {
    void : useShaderProgram()
    void : renderTexture(textureUnit : GLint)
}
interface STGLTextureShaderYCbCr {
    void : useShaderProgram()
    void : renderWithLumaTexture(lumaTextureUnit : GLint, chromaTextureUnit : GLint)
}
interface STGLTextureShaderGray {
    void : useShaderProgram()
    void : renderWithLumaTexture(lumaTextureUnit : GLint)
}
interface STDepthToRgba {
    rgbaBuffer : uint8_t
    width : int
    height : int
    instancetype : initWithOptions(options : NSDictionary)
    uint8_t : convertDepthFrameToRgba(frame : STDepthFrame)
}
interface STWirelessLog {
    void : broadcastLogsToWirelessConsoleAtAddress(ipv4Address : String, port : int, error : NSError)
}
interface STBackgroundTask {
    isCancelled : bool
    delegate : id<STBackgroundTaskDelegate>
    void : start()
    void : cancel()
    void : waitUntilCompletion()
}
class STBackgroundTaskDelegate {
    void : backgroundTask(sender : STBackgroundTask, progress: Double)
}
}

package StructureSLAM {
interface STMesh {
    numberOfMeshes : int
    meshYCbCrTexture : CVPixelBufferRef
    int : numberOfMeshFaces(meshIndex : int)
    int : numberOfMeshVerticles(meshIndex : int)
    int : numberOfMeshLines(meshIndex: int)
    bool : hasPerVertexNormals()
    bool : hasPerVertexColors()
    bool : hasPerVertexTextureCoords()
    GLKVector3 : meshVerticles(meshIndex : int)
    GLKVector3 : meshPerVertexNormals(meshIndex : int)
    GLKVector2 : MeshPErVertexUVTextureCoords(meshIndex : int)
    short : meshFaces(meshIndex : int)
    short : meshLines(meshIndex : int)
    bool : writeFile(filePath: String, options: NSDictionary, error: NSError)
    instancetype : initWithMesh(mesh : STMesh)
    STBackgroundTask : newDecimateTaskWithMesh(inputMesh : STMesh, numFaces : int, completionHandler : void)
    STBackgroundTask : newFillHolesTaskWithMesh(inputMesh : STMesh, handler : void)
}
interface STMeshIntersector {
    instanceType : initWithMesh(inputMesh: STMesh)
    bool: intersectWithRayOrigin(origin: GLKVector3, end: GLKVector3, intersection: GLKVector3, normal: GLKVector3, ignoreBackface: bool)
    bool: intersectWithRayOrigin(origin: GLKVector3, end: GLKVector3, intersection: GLKVector3, normal: GLKVector3, intersectionFaceIndex: int)
    bool: faceIsOnPlane(faceIndex: int, normal: GLKVector3)
}
interface STScene {
    instancetype: initWithContext(glContext : EAGLContext) 
    STMesh : lockAndGetSceneMesh()
    void : unlockSceneMesh()
    bool: renderMeshFromViewPoint(cameraPose : GLKMatrix4, cameraGlProjection : GLMatrix4, alpha: float, highlightOutOfRangeDepth : bool, wireframe : bool)
    void : clear()
}
interface STTracker {
    scene : STScene
    initialCameraPose : GLKMatrix4
    trackerHints : STTrackerHints
    poseAccuracy : STTrackerPoseAccuracy
    instancetype : initWithScene(scene : STScene, options: NSDictionnary)
    void : reset()
    bool : updateCameraPoseWithDepthFrame(depthFrame : STDepthFrame, colorFrame: STColorFrame, error: NSError)
    GLKMatrix4 : lastFrameCameraPose()
    void : setOptions(options : NSDictionary)
}
interface STMapper {
    scene : STScene
    instancetype : initWithScene(scene: STScene, ooptions: NSDictionnary)
    void : integrateDepthFrame(depthFrame : STDepthFrame, cameraPose : GLKMatrix4)
    void : finalizeTriangleMesh()
}
interface STCameraPoseInitializer {
    volumeSizeInMeters : GLKVector3
    lastOutput : STCameraPoseInitializerOutput
    cameraPose : GLKMatrix4
    hasValidPose : bool
    hasSupportPlane : bool
    instancetype : initWithVolumeSizeInMeters(volumeSize: GLKVector3, options: NSDictionnary)
    bool : updateCameraPoseWithGravity(gravityInDeviceFrame : GLKVector3, depthFrame: STDepthFrame, error: NSError)
    void : detectInnerPixelsWithDepthFrame(depthFrame: STDepthFrame, mask: uint8_t)
}
interface STCubeRenderer {
    instancetype : initWithContext(glContext : EAGLContext) 
    void : setDepthFrame(depthFrame: STDepthFrame)
    void : setCubeHAsSupportPlane(hasSupportPlane: bool)
    void : adjustCubeSize(sizeInMeters: GLKVector3)
    void : renderHighlightedDepthWithCameraFrame(cameraPose: GLKMatrix4, alpha: float)
    void : renderCubeOutlineWithCameraPose(cameraPose: GLKMatrix4, depthTestEnabled: bool, occlusionTestEnabled: bool)
}
interface STNormalEstimator {
    STNormalFrame : calculateNormalsWithDepthFrame(depthFrame: STDepthFrame)
}
interface STKeyFrame {
    instancetype : initWithColorCameraPose(colorCameraPose: GLKMatrix4, colorFrame: STColorFrame, depthFrame: STDepthFrame) 
}
interface STKeyFrameManager {
    instancetype : initWithOptions(options: NSDictionnary)
    bool : wouldBeNewKeyframeWithColorCameraPose(colorCameraPose: GLKMatrix4)
    bool : processKeyFrameCandiateWithColorCameraPose(colorCameraPose: GLKMatrix4, colorFrame: STColorFrame, depthFrame: STDepthFrame)
    void : addKeyFrame(keyFrame: STKeyFrame)
    STKeyFrame[] : getKeyFrames()
    void : clear()
}
interface STColorizer {
    STBackgroundTask : newColorizeTaskWithMesh(mesh: STMesh, scene: STScene, keyframes: STKeyFrame[], handler : void) 
}
}

STMeshIntersector -up-> STMesh
STScene -down-> STMesh
STTracker -down-> STColorFrame
STTracker -down-> STDepthFrame
STMapper -right-> STDepthFrame
STCubeRenderer -right-> STDepthFrame
STCameraPoseInitializer -right-> STDepthFrame
STNormalEstimator -right-> STDepthFrame
STKeyFrame -right-> STDepthFrame
STKeyFrame -up-> STColorFrame
STTracker -down-> STScene
STKeyFrameManager -right-> STDepthFrame
STKeyFrameManager -right-> STColorFrame
STKeyFrameManager -up-> STKeyFrame
STMapper -left-> STScene
STColorizer -right-> STMesh
STColorizer -up-> STScene
STColorizer -down-> STKeyFrame
STColorizer -right-> STBackgroundTask 

STColorFrame <|-left- CColorFrame
STSensorControllerDelegate -down-> STDepthFrame
STSensorControllerDelegate -right-> STInfraredFrame
STSensorControllerDelegate -down-> CColorFrame
STSensorController -down-> STSensorControllerDelegate
STDepthToRgba -left-> STDepthFrame
STBackgroundTask -right-> STBackgroundTaskDelegate
top to bottom direction
Structure -[hidden]down- StructureSLAM
STNormalEstimator -[hidden]up- STCameraPoseInitializer
STNormalEstimator -[hidden]down- STTracker
STTracker -[hidden]down- STMapper
STMapper -[hidden]down- STScene
STScene -[hidden]down- STColorizer
STKeyFrameManager -[hidden]down- STCubeRenderer
STDepthFrame -[hidden]down- STColorFrame
STSensorController -[hidden]up- STBackgroundTask
STBackgroundTask -[hidden]up- STGLTextureShaderRGBA
STGLTextureShaderRGBA -[hidden]up- STGLTextureShaderYCbCr
STGLTextureShaderYCbCr -[hidden]up- STGLTextureShaderGray
STGLTextureShaderGray -[hidden]up-STWirelessLog

@enduml
